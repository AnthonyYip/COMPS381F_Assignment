{
  "name": "node-alert",
  "version": "0.1.1",
  "description": "A Node.js library to send alerts through various channels (mail, IRC, push services) ",
  "main": "index.js",
  "directories": {
    "test": "tests"
  },
  "scripts": {
    "test": "mocha -R spec tests"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/shrikrishnaholla/node-alert.git"
  },
  "keywords": [
    "crash-alert",
    "crash",
    "alert",
    "notification",
    "alarm"
  ],
  "author": {
    "name": "Shrikrishna Holla",
    "email": "shrikrishna.holla@gmail.com"
  },
  "license": "Apache-2.0",
  "bugs": {
    "url": "https://github.com/shrikrishnaholla/node-alert/issues"
  },
  "homepage": "https://github.com/shrikrishnaholla/node-alert",
  "dependencies": {
    "broadway": "^0.2.10",
    "deasync": "0.0.10",
    "debug": "^2.0.0",
    "lazy-require": "^1.0.0"
  },
  "devDependencies": {
    "mocha": "^1.21.4"
  },
  "readme": "node-alert\n==========\n\nnode-alert is a module whose primary purpose is to provide ways to alert you in the event of an error/crash  \n\n### Features\n- **Extensible** : All alert systems are built as plugins and are available under [lib/services](lib/services)\n- **Lazy requires** : The packages required by the plugins will only be downloaded if the user has asked for the plugin and if the package is not already available\n- **Straightforward APIs** : node-alert doesn't have any APIs of its own. APIs exposed by plugins will be available to the user\n- **Easy to author plugins** : Plugin architecture is based on [Broadway](https://github.com/flatiron/broadway), which makes it easy to write plugins. Check out [mail](lib/services/mail) plugin for an example.\n\n### Example usage for mail plugin\n```javascript\nvar alert = require('node-alert')({\n  plugins : {\n    mail : {\n      nodemailer : {\n        port : 25,\n        host : \"smtp.myserver.com\",\n        auth : {\n          user : \"myname@myserver.com\",\n          pass : \"mypass\"\n      },\n      message   : {\n        addressed_to : \"node-alert maintainer\",\n        serviceName : \"Node-Alert test\"\n      }\n    } \n  }\n});\n\nalert.alertMail(new Error('Test Error'), function(err, info) {\n  if (err) console.log(err);\n  else console.log('Success!');\n});\n\n```\n## Usage guidelines\n- node-alert based services should not be used to handle `process.on('uncaughtException')`. Use [Domains](nodejs.org/api/domain.html) instead.  \n\n\n## Plugin Authoring Guidelines\n- Plugins are based on [Broadway](https://github.com/flatiron/broadway) and have to adhere to their conventions\n- One service per plugin\n- Avoid cross-dependency with other plugins\n- Only expose those API that are useful\n- Lazy load modules. If using any service, use the [require-helper](lib/requireHelper.js). For example, see the [mail plugin](lib/services/mail/index.js).\n- Provide README.md with every plugin, containing at least one example of usage. (Example: mail plugin's [README](lib/services/mail/README.md))\n- Folder name of the plugin will be the same as the option the user will be expected to provide (Example: *mail* plugin requires that the user provide options to the plugin under `mail`. Check the example provided above)\n",
  "readmeFilename": "README.md",
  "_id": "node-alert@0.1.1",
  "_shasum": "1cc3345151fc71d5344c375b79d44d798636a258",
  "_from": "node-alert@",
  "_resolved": "https://registry.npmjs.org/node-alert/-/node-alert-0.1.1.tgz"
}
